name: ArchLinux Build AUR Package

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron:  '0 27 3 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  buildAUR:
    strategy:
      matrix:
        repos: [onedriver, visual-studio-code-bin, google-chrome, flashplayer-standalone-debug, flashplayer-standalone, gotktrix-git, aliyundrive-webdav-bin, aliyunpan-liupan1890, anydesk-bin, appmenu-qt4, darkman, davfs2, fcitx5-skin-material, go-cqhttp-bin, gtk-chat, httpfs2-2gbplus, kodi-addon-pvr-iptvsimple, mkinitcpio-openswap, mongodb-bin, vala-panel-appmenu-registrar-git, osu-lazer]

      fail-fast: false
      
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - uses: ./build-aur-action
      with:
        repo-name: ${{ matrix.repos }}
    
    - uses: actions/upload-artifact@v2
      with:
        path: ./*/*.pkg.tar.zst
        name: ${{ matrix.repos }}
        
    - uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        tag: "packages"
        artifacts: "./*/*.zst"
        token: ${{ secrets.GITHUB_TOKEN }}

  buildNonAUR:
    strategy:
      matrix:
        PKGBUILDs: [breeze10, python-octodns]

      fail-fast: false
      
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build Non-AUR packages
        id: makepkg
        uses: ./build-nonaur-action
        with:
          pkgdir: ${{ matrix.PKGBUILDs }}
          aurDeps: true
          
      - uses: actions/upload-artifact@v2
        with:
          path: ./*/*.pkg.tar.zst
          name: ${{ matrix.PKGBUILDs }}
      
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: "packages"
          artifacts: ${{ steps.makepkg.outputs.pkgfile0 }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
  uploadToOneDrive:      
    runs-on: ubuntu-latest
    if: always()
    needs: [buildAUR, buildNonAUR]

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/download-artifact@v2
        id: download
      
      - uses: ./create-db-and-upload-action
        with:
          RCLONE_ONEDRIVE_CLIENT_ID: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_ID }}
          RCLONE_ONEDRIVE_CLIENT_SECRET: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_SECRET }}
          RCLONE_ONEDRIVE_REGION: global
          RCLONE_ONEDRIVE_TOKEN: ${{ secrets.RCLONE_ONEDRIVE_TOKEN }}
          RCLONE_ONEDRIVE_DRIVE_ID: ${{ secrets.RCLONE_ONEDRIVE_DRIVE_ID }}
          RCLONE_ONEDRIVE_DRIVE_TYPE: business
          dest_path: /ArchLinux-yuioto-repo/
          repo_name: yuioto
          gpg-privatekey: ${{ secrets.gpg_private_key }}
          local_path: ${{ steps.download.outputs.download-path }}
